const fs = require('fs');
const path = require('path');
const pdf = require('html-pdf');

// PDF configuration
const pdfOptions = {
  format: 'A4',
  orientation: 'portrait',
  border: {
    top: '0.5in',
    right: '0.5in',
    bottom: '0.5in',
    left: '0.5in'
  },
  header: {
    height: '20mm'
  },
  footer: {
    height: '20mm'
  },
  type: 'pdf',
  quality: '75',
  phantomjs: {
    '--ignore-ssl-errors': 'yes'
  }
};

// Ensure temp directory exists
const tempDir = process.env.PDF_TEMP_DIR || 'temp/pdfs';
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir, { recursive: true });
}

// Base HTML template for reports
const getBaseTemplate = (title, content, styles = '') => `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>${title}</title>
  <style>
    body {
      font-family: 'Helvetica', 'Arial', sans-serif;
      margin: 0;
      padding: 20px;
      color: #333;
      line-height: 1.6;
    }
    .header {
      border-bottom: 3px solid #1976d2;
      padding-bottom: 20px;
      margin-bottom: 30px;
      text-align: center;
    }
    .header h1 {
      color: #1976d2;
      margin: 0;
      font-size: 28px;
      font-weight: 300;
    }
    .header .subtitle {
      color: #666;
      font-size: 14px;
      margin-top: 10px;
    }
    .section {
      margin-bottom: 30px;
    }
    .section-title {
      color: #1976d2;
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 15px;
      border-bottom: 1px solid #eee;
      padding-bottom: 5px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
      font-size: 12px;
    }
    th, td {
      padding: 10px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    th {
      background-color: #f8f9fa;
      font-weight: 600;
      color: #495057;
    }
    .amount {
      text-align: right;
      font-weight: 600;
    }
    .status {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 10px;
      font-weight: 600;
      text-transform: uppercase;
    }
    .status.pending { background-color: #fff3cd; color: #856404; }
    .status.approved { background-color: #d4edda; color: #155724; }
    .status.rejected { background-color: #f8d7da; color: #721c24; }
    .summary-card {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      border-left: 4px solid #1976d2;
      padding: 20px;
      margin-bottom: 20px;
      border-radius: 5px;
    }
    .summary-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 20px;
    }
    .summary-item {
      text-align: center;
    }
    .summary-item .value {
      font-size: 24px;
      font-weight: 600;
      color: #1976d2;
      display: block;
    }
    .summary-item .label {
      font-size: 12px;
      color: #666;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    .footer {
      margin-top: 50px;
      padding-top: 20px;
      border-top: 1px solid #eee;
      text-align: center;
      font-size: 12px;
      color: #666;
    }
    .text-center { text-align: center; }
    .text-right { text-align: right; }
    .mt-20 { margin-top: 20px; }
    .mb-20 { margin-bottom: 20px; }
    ${styles}
  </style>
</head>
<body>
  <div class="header">
    <h1>ðŸ’° ERP Budget Tracker</h1>
    <div class="subtitle">${title}</div>
    <div class="subtitle">Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</div>
  </div>
  ${content}
  <div class="footer">
    <p>This report was generated by ERP Budget Tracker System</p>
    <p>Â© ${new Date().getFullYear()} ERP Budget Tracker. All rights reserved.</p>
  </div>
</body>
</html>
`;

// Generate expense report PDF
const generateExpenseReport = async (expenses, filters = {}) => {
  try {
    const totalAmount = expenses.reduce((sum, expense) => sum + expense.amount, 0);
    const approvedAmount = expenses.filter(e => e.status === 'approved').reduce((sum, expense) => sum + expense.amount, 0);
    const pendingAmount = expenses.filter(e => e.status === 'pending').reduce((sum, expense) => sum + expense.amount, 0);
    const rejectedAmount = expenses.filter(e => e.status === 'rejected').reduce((sum, expense) => sum + expense.amount, 0);

    const summaryHtml = `
      <div class="summary-card">
        <div class="summary-grid">
          <div class="summary-item">
            <span class="value">$${totalAmount.toFixed(2)}</span>
            <span class="label">Total Expenses</span>
          </div>
          <div class="summary-item">
            <span class="value">$${approvedAmount.toFixed(2)}</span>
            <span class="label">Approved</span>
          </div>
          <div class="summary-item">
            <span class="value">$${pendingAmount.toFixed(2)}</span>
            <span class="label">Pending</span>
          </div>
          <div class="summary-item">
            <span class="value">$${rejectedAmount.toFixed(2)}</span>
            <span class="label">Rejected</span>
          </div>
        </div>
      </div>
    `;

    const filtersHtml = Object.keys(filters).length > 0 ? `
      <div class="section">
        <div class="section-title">Report Filters</div>
        <p>${Object.entries(filters).map(([key, value]) => `<strong>${key}:</strong> ${value}`).join(' | ')}</p>
      </div>
    ` : '';

    const expensesHtml = `
      <div class="section">
        <div class="section-title">Expense Details</div>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Title</th>
              <th>Category</th>
              <th>Amount</th>
              <th>Status</th>
              <th>Submitted By</th>
            </tr>
          </thead>
          <tbody>
            ${expenses.map(expense => `
              <tr>
                <td>${new Date(expense.date).toLocaleDateString()}</td>
                <td>${expense.title}</td>
                <td>${expense.category?.name || 'N/A'}</td>
                <td class="amount">$${expense.amount.toFixed(2)}</td>
                <td><span class="status ${expense.status}">${expense.status}</span></td>
                <td>${expense.submittedBy?.name || 'N/A'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;

    const content = summaryHtml + filtersHtml + expensesHtml;
    const html = getBaseTemplate('Expense Report', content);

    return await generatePdfFromHtml(html, `expense-report-${Date.now()}.pdf`);
  } catch (error) {
    console.error('Error generating expense report:', error);
    throw error;
  }
};

// Generate budget report PDF
const generateBudgetReport = async (budgets, expenses = []) => {
  try {
    const totalBudget = budgets.reduce((sum, budget) => sum + budget.amount, 0);
    const totalSpent = expenses.reduce((sum, expense) => sum + expense.amount, 0);
    const remainingBudget = totalBudget - totalSpent;

    const summaryHtml = `
      <div class="summary-card">
        <div class="summary-grid">
          <div class="summary-item">
            <span class="value">$${totalBudget.toFixed(2)}</span>
            <span class="label">Total Budget</span>
          </div>
          <div class="summary-item">
            <span class="value">$${totalSpent.toFixed(2)}</span>
            <span class="label">Total Spent</span>
          </div>
          <div class="summary-item">
            <span class="value">$${remainingBudget.toFixed(2)}</span>
            <span class="label">Remaining</span>
          </div>
          <div class="summary-item">
            <span class="value">${totalBudget > 0 ? ((totalSpent / totalBudget) * 100).toFixed(1) : 0}%</span>
            <span class="label">Usage</span>
          </div>
        </div>
      </div>
    `;

    const budgetsHtml = `
      <div class="section">
        <div class="section-title">Budget Details</div>
        <table>
          <thead>
            <tr>
              <th>Budget Name</th>
              <th>Category</th>
              <th>Period</th>
              <th>Amount</th>
              <th>Spent</th>
              <th>Remaining</th>
              <th>Usage %</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            ${budgets.map(budget => {
              const spent = expenses.filter(e => e.budget?.toString() === budget._id.toString()).reduce((sum, e) => sum + e.amount, 0);
              const remaining = budget.amount - spent;
              const usage = budget.amount > 0 ? ((spent / budget.amount) * 100).toFixed(1) : 0;
              
              return `
                <tr>
                  <td>${budget.name}</td>
                  <td>${budget.category?.name || 'N/A'}</td>
                  <td>${budget.period}</td>
                  <td class="amount">$${budget.amount.toFixed(2)}</td>
                  <td class="amount">$${spent.toFixed(2)}</td>
                  <td class="amount">$${remaining.toFixed(2)}</td>
                  <td class="text-center">${usage}%</td>
                  <td><span class="status ${budget.status}">${budget.status}</span></td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      </div>
    `;

    const content = summaryHtml + budgetsHtml;
    const html = getBaseTemplate('Budget Report', content);

    return await generatePdfFromHtml(html, `budget-report-${Date.now()}.pdf`);
  } catch (error) {
    console.error('Error generating budget report:', error);
    throw error;
  }
};

// Generate comprehensive financial report
const generateFinancialReport = async (budgets, expenses, dateRange = {}) => {
  try {
    const { startDate, endDate } = dateRange;
    const dateRangeText = startDate && endDate 
      ? `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`
      : 'All Time';

    // Calculate metrics
    const totalBudget = budgets.reduce((sum, budget) => sum + budget.amount, 0);
    const totalExpenses = expenses.reduce((sum, expense) => sum + expense.amount, 0);
    const approvedExpenses = expenses.filter(e => e.status === 'approved').reduce((sum, e) => sum + e.amount, 0);
    const pendingExpenses = expenses.filter(e => e.status === 'pending').reduce((sum, e) => sum + e.amount, 0);

    // Category breakdown
    const categoryBreakdown = {};
    expenses.forEach(expense => {
      const category = expense.category?.name || 'Uncategorized';
      if (!categoryBreakdown[category]) {
        categoryBreakdown[category] = { count: 0, amount: 0 };
      }
      categoryBreakdown[category].count++;
      categoryBreakdown[category].amount += expense.amount;
    });

    const summaryHtml = `
      <div class="summary-card">
        <h3 style="margin-top: 0; color: #1976d2;">Financial Summary (${dateRangeText})</h3>
        <div class="summary-grid">
          <div class="summary-item">
            <span class="value">$${totalBudget.toFixed(2)}</span>
            <span class="label">Total Budget</span>
          </div>
          <div class="summary-item">
            <span class="value">$${totalExpenses.toFixed(2)}</span>
            <span class="label">Total Expenses</span>
          </div>
          <div class="summary-item">
            <span class="value">$${approvedExpenses.toFixed(2)}</span>
            <span class="label">Approved Expenses</span>
          </div>
          <div class="summary-item">
            <span class="value">$${pendingExpenses.toFixed(2)}</span>
            <span class="label">Pending Expenses</span>
          </div>
        </div>
      </div>
    `;

    const categoryHtml = `
      <div class="section">
        <div class="section-title">Expenses by Category</div>
        <table>
          <thead>
            <tr>
              <th>Category</th>
              <th>Count</th>
              <th>Total Amount</th>
              <th>Average</th>
              <th>% of Total</th>
            </tr>
          </thead>
          <tbody>
            ${Object.entries(categoryBreakdown).map(([category, data]) => `
              <tr>
                <td>${category}</td>
                <td class="text-center">${data.count}</td>
                <td class="amount">$${data.amount.toFixed(2)}</td>
                <td class="amount">$${(data.amount / data.count).toFixed(2)}</td>
                <td class="text-center">${totalExpenses > 0 ? ((data.amount / totalExpenses) * 100).toFixed(1) : 0}%</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;

    const content = summaryHtml + categoryHtml;
    const html = getBaseTemplate('Financial Report', content);

    return await generatePdfFromHtml(html, `financial-report-${Date.now()}.pdf`);
  } catch (error) {
    console.error('Error generating financial report:', error);
    throw error;
  }
};

// Core PDF generation function
const generatePdfFromHtml = (html, filename) => {
  return new Promise((resolve, reject) => {
    const filePath = path.join(tempDir, filename);
    
    pdf.create(html, pdfOptions).toFile(filePath, (err, result) => {
      if (err) {
        reject(err);
      } else {
        // Clean up old files (older than 1 hour)
        cleanupOldFiles();
        
        resolve({
          filename,
          filePath,
          fileSize: fs.statSync(filePath).size
        });
      }
    });
  });
};

// Clean up old PDF files
const cleanupOldFiles = () => {
  try {
    const files = fs.readdirSync(tempDir);
    const oneHourAgo = Date.now() - (60 * 60 * 1000);
    
    files.forEach(file => {
      const filePath = path.join(tempDir, file);
      const stats = fs.statSync(filePath);
      
      if (stats.birthtime.getTime() < oneHourAgo) {
        fs.unlinkSync(filePath);
        console.log(`Cleaned up old PDF file: ${file}`);
      }
    });
  } catch (error) {
    console.error('Error cleaning up old files:', error);
  }
};

module.exports = {
  generateExpenseReport,
  generateBudgetReport,
  generateFinancialReport,
  generatePdfFromHtml
};