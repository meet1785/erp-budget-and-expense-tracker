const express = require('express');
const router = express.Router();
const { protect, authorize } = require('../middleware/auth');
const { generateExpenseReport, generateBudgetReport, generateFinancialReport } = require('../utils/pdfService');
const Expense = require('../models/Expense');
const Budget = require('../models/Budget');
const path = require('path');
const fs = require('fs');

// @desc    Generate expense report PDF
// @route   POST /api/reports/expenses
// @access  Private
router.post('/expenses', protect, async (req, res) => {
  try {
    const { 
      startDate, 
      endDate, 
      category, 
      status, 
      department,
      submittedBy,
      currency = 'USD'
    } = req.body;

    // Build query
    let query = {};
    
    if (startDate && endDate) {
      query.date = {
        $gte: new Date(startDate),
        $lte: new Date(endDate)
      };
    }
    
    if (category) query.category = category;
    if (status) query.status = status;
    if (department) query.department = department;
    if (submittedBy) query.submittedBy = submittedBy;

    // For non-admin users, only show their own expenses or department expenses
    if (req.user.role === 'user') {
      query.submittedBy = req.user._id;
    } else if (req.user.role === 'manager' && req.user.department) {
      query.department = req.user.department;
    }

    // Fetch expenses with populated fields
    const expenses = await Expense.find(query)
      .populate('category', 'name')
      .populate('submittedBy', 'name email')
      .sort({ date: -1 });

    if (expenses.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'No expenses found for the specified criteria'
      });
    }

    // Generate PDF report
    const report = await generateExpenseReport(expenses, {
      'Date Range': startDate && endDate ? `${startDate} to ${endDate}` : 'All dates',
      'Category': category ? 'Filtered' : 'All categories',
      'Status': status || 'All statuses',
      'Department': department || 'All departments',
      'Generated By': req.user.name
    });

    res.json({
      success: true,
      message: 'Expense report generated successfully',
      data: {
        filename: report.filename,
        downloadUrl: `/temp/pdfs/${report.filename}`,
        fileSize: report.fileSize,
        recordCount: expenses.length
      }
    });

  } catch (error) {
    console.error('Error generating expense report:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to generate expense report',
      error: error.message
    });
  }
});

// @desc    Generate budget report PDF
// @route   POST /api/reports/budgets
// @access  Private
router.post('/budgets', protect, async (req, res) => {
  try {
    const { 
      startDate, 
      endDate, 
      category, 
      status, 
      department,
      owner
    } = req.body;

    // Build query for budgets
    let budgetQuery = {};
    
    if (startDate && endDate) {
      budgetQuery.$and = [
        { startDate: { $lte: new Date(endDate) } },
        { endDate: { $gte: new Date(startDate) } }
      ];
    }
    
    if (category) budgetQuery.category = category;
    if (status) budgetQuery.status = status;
    if (department) budgetQuery.department = department;
    if (owner) budgetQuery.owner = owner;

    // For non-admin users, only show their own budgets or department budgets
    if (req.user.role === 'user') {
      budgetQuery.owner = req.user._id;
    } else if (req.user.role === 'manager' && req.user.department) {
      budgetQuery.department = req.user.department;
    }

    // Fetch budgets with populated fields
    const budgets = await Budget.find(budgetQuery)
      .populate('category', 'name')
      .populate('owner', 'name email')
      .sort({ startDate: -1 });

    if (budgets.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'No budgets found for the specified criteria'
      });
    }

    // Get related expenses for budget analysis
    const budgetIds = budgets.map(b => b._id);
    const expenses = await Expense.find({
      budget: { $in: budgetIds },
      status: { $in: ['approved', 'reimbursed'] }
    });

    // Generate PDF report
    const report = await generateBudgetReport(budgets, expenses);

    res.json({
      success: true,
      message: 'Budget report generated successfully',
      data: {
        filename: report.filename,
        downloadUrl: `/temp/pdfs/${report.filename}`,
        fileSize: report.fileSize,
        recordCount: budgets.length
      }
    });

  } catch (error) {
    console.error('Error generating budget report:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to generate budget report',
      error: error.message
    });
  }
});

// @desc    Generate comprehensive financial report PDF
// @route   POST /api/reports/financial
// @access  Private (Manager/Admin only)
router.post('/financial', protect, authorize('manager', 'admin'), async (req, res) => {
  try {
    const { 
      startDate, 
      endDate,
      department,
      currency = 'USD'
    } = req.body;

    // Build queries
    let budgetQuery = {};
    let expenseQuery = {};
    
    if (startDate && endDate) {
      budgetQuery.$and = [
        { startDate: { $lte: new Date(endDate) } },
        { endDate: { $gte: new Date(startDate) } }
      ];
      expenseQuery.date = {
        $gte: new Date(startDate),
        $lte: new Date(endDate)
      };
    }
    
    if (department) {
      budgetQuery.department = department;
      expenseQuery.department = department;
    }

    // For managers, only show their department data
    if (req.user.role === 'manager' && req.user.department) {
      budgetQuery.department = req.user.department;
      expenseQuery.department = req.user.department;
    }

    // Fetch data
    const [budgets, expenses] = await Promise.all([
      Budget.find(budgetQuery)
        .populate('category', 'name')
        .populate('owner', 'name email')
        .sort({ startDate: -1 }),
      
      Expense.find(expenseQuery)
        .populate('category', 'name')
        .populate('submittedBy', 'name email')
        .sort({ date: -1 })
    ]);

    if (budgets.length === 0 && expenses.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'No financial data found for the specified criteria'
      });
    }

    // Generate comprehensive financial report
    const report = await generateFinancialReport(budgets, expenses, {
      startDate,
      endDate
    });

    res.json({
      success: true,
      message: 'Financial report generated successfully',
      data: {
        filename: report.filename,
        downloadUrl: `/temp/pdfs/${report.filename}`,
        fileSize: report.fileSize,
        budgetCount: budgets.length,
        expenseCount: expenses.length
      }
    });

  } catch (error) {
    console.error('Error generating financial report:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to generate financial report',
      error: error.message
    });
  }
});

// @desc    Download report file
// @route   GET /api/reports/download/:filename
// @access  Private
router.get('/download/:filename', protect, (req, res) => {
  try {
    const filename = req.params.filename;
    const filePath = path.join(__dirname, '../../temp/pdfs', filename);

    // Check if file exists
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({
        success: false,
        message: 'Report file not found'
      });
    }

    // Set appropriate headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

    // Stream the file
    const fileStream = fs.createReadStream(filePath);
    fileStream.pipe(res);

    // Clean up file after download (optional)
    fileStream.on('end', () => {
      setTimeout(() => {
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`Report file deleted: ${filename}`);
        }
      }, 5000); // Delete after 5 seconds
    });

  } catch (error) {
    console.error('Error downloading report:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to download report',
      error: error.message
    });
  }
});

// @desc    Get available report types
// @route   GET /api/reports/types
// @access  Private
router.get('/types', protect, (req, res) => {
  const reportTypes = [
    {
      id: 'expenses',
      name: 'Expense Report',
      description: 'Detailed report of expenses with filtering options',
      endpoint: '/api/reports/expenses',
      requiredRole: 'user'
    },
    {
      id: 'budgets',
      name: 'Budget Report',
      description: 'Budget allocation and usage report',
      endpoint: '/api/reports/budgets',
      requiredRole: 'user'
    },
    {
      id: 'financial',
      name: 'Financial Report',
      description: 'Comprehensive financial overview with analytics',
      endpoint: '/api/reports/financial',
      requiredRole: 'manager'
    }
  ];

  // Filter reports based on user role
  const availableReports = reportTypes.filter(report => {
    if (req.user.role === 'admin') return true;
    if (req.user.role === 'manager' && ['user', 'manager'].includes(report.requiredRole)) return true;
    if (req.user.role === 'user' && report.requiredRole === 'user') return true;
    return false;
  });

  res.json({
    success: true,
    data: availableReports
  });
});

module.exports = router;